// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/payment-processor/internal/debit/application"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockUseCase
func (_mock *MockUseCase) Handle(ctx context.Context, req application.Request) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, application.Request) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUseCase_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockUseCase_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - req application.Request
func (_e *MockUseCase_Expecter) Handle(ctx interface{}, req interface{}) *MockUseCase_Handle_Call {
	return &MockUseCase_Handle_Call{Call: _e.mock.On("Handle", ctx, req)}
}

func (_c *MockUseCase_Handle_Call) Run(run func(ctx context.Context, req application.Request)) *MockUseCase_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 application.Request
		if args[1] != nil {
			arg1 = args[1].(application.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUseCase_Handle_Call) Return(err error) *MockUseCase_Handle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUseCase_Handle_Call) RunAndReturn(run func(ctx context.Context, req application.Request) error) *MockUseCase_Handle_Call {
	_c.Call.Return(run)
	return _c
}
