// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/payment-processor/internal/debit/application/ports"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEventBusProcessor creates a new instance of MockEventBusProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBusProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBusProcessor {
	mock := &MockEventBusProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventBusProcessor is an autogenerated mock type for the EventBusProcessor type
type MockEventBusProcessor struct {
	mock.Mock
}

type MockEventBusProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBusProcessor) EXPECT() *MockEventBusProcessor_Expecter {
	return &MockEventBusProcessor_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockEventBusProcessor
func (_mock *MockEventBusProcessor) Publish(context1 context.Context, balanceDebitedRequest ports.BalanceDebitedRequest) error {
	ret := _mock.Called(context1, balanceDebitedRequest)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ports.BalanceDebitedRequest) error); ok {
		r0 = returnFunc(context1, balanceDebitedRequest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventBusProcessor_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEventBusProcessor_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - context1 context.Context
//   - balanceDebitedRequest ports.BalanceDebitedRequest
func (_e *MockEventBusProcessor_Expecter) Publish(context1 interface{}, balanceDebitedRequest interface{}) *MockEventBusProcessor_Publish_Call {
	return &MockEventBusProcessor_Publish_Call{Call: _e.mock.On("Publish", context1, balanceDebitedRequest)}
}

func (_c *MockEventBusProcessor_Publish_Call) Run(run func(context1 context.Context, balanceDebitedRequest ports.BalanceDebitedRequest)) *MockEventBusProcessor_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ports.BalanceDebitedRequest
		if args[1] != nil {
			arg1 = args[1].(ports.BalanceDebitedRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventBusProcessor_Publish_Call) Return(err error) *MockEventBusProcessor_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventBusProcessor_Publish_Call) RunAndReturn(run func(context1 context.Context, balanceDebitedRequest ports.BalanceDebitedRequest) error) *MockEventBusProcessor_Publish_Call {
	_c.Call.Return(run)
	return _c
}
