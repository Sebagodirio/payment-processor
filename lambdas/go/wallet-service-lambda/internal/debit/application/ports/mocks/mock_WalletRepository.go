// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/payment-processor/internal/debit/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWalletRepository creates a new instance of MockWalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletRepository {
	mock := &MockWalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWalletRepository is an autogenerated mock type for the WalletRepository type
type MockWalletRepository struct {
	mock.Mock
}

type MockWalletRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWalletRepository) EXPECT() *MockWalletRepository_Expecter {
	return &MockWalletRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockWalletRepository
func (_mock *MockWalletRepository) Get(context1 context.Context, userID domain.UserID) (domain.Wallet, error) {
	ret := _mock.Called(context1, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Wallet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) (domain.Wallet, error)); ok {
		return returnFunc(context1, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) domain.Wallet); ok {
		r0 = returnFunc(context1, userID)
	} else {
		r0 = ret.Get(0).(domain.Wallet)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = returnFunc(context1, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWalletRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWalletRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - userID domain.UserID
func (_e *MockWalletRepository_Expecter) Get(context1 interface{}, userID interface{}) *MockWalletRepository_Get_Call {
	return &MockWalletRepository_Get_Call{Call: _e.mock.On("Get", context1, userID)}
}

func (_c *MockWalletRepository_Get_Call) Run(run func(context1 context.Context, userID domain.UserID)) *MockWalletRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWalletRepository_Get_Call) Return(wallet domain.Wallet, err error) *MockWalletRepository_Get_Call {
	_c.Call.Return(wallet, err)
	return _c
}

func (_c *MockWalletRepository_Get_Call) RunAndReturn(run func(context1 context.Context, userID domain.UserID) (domain.Wallet, error)) *MockWalletRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockWalletRepository
func (_mock *MockWalletRepository) Update(context1 context.Context, wallet domain.Wallet) error {
	ret := _mock.Called(context1, wallet)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Wallet) error); ok {
		r0 = returnFunc(context1, wallet)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWalletRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWalletRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - wallet domain.Wallet
func (_e *MockWalletRepository_Expecter) Update(context1 interface{}, wallet interface{}) *MockWalletRepository_Update_Call {
	return &MockWalletRepository_Update_Call{Call: _e.mock.On("Update", context1, wallet)}
}

func (_c *MockWalletRepository_Update_Call) Run(run func(context1 context.Context, wallet domain.Wallet)) *MockWalletRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Wallet
		if args[1] != nil {
			arg1 = args[1].(domain.Wallet)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWalletRepository_Update_Call) Return(err error) *MockWalletRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWalletRepository_Update_Call) RunAndReturn(run func(context1 context.Context, wallet domain.Wallet) error) *MockWalletRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
